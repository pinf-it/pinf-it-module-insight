{
    "filename": "nodeAdapter.js",
    "filepath": "umd/nodeAdapter.js",
    "mtime": 0,
    "code": "// @see https://github.com/umdjs/umd/blob/master/nodeAdapter.js\n// Defines a module that works in Node and AMD.\n\n// This version can be used as common boilerplate for a library module\n// that you only want to expose to Node and AMD loaders. It will not work\n// well for defining browser globals.\n\n// If you need a version of this file that works CommonJS-like environments\n// that do not support module.exports or if you want to define a module\n// with a circular dependency, see commonjsAdapter.js\n\n// Help Node out by setting up define.\nif (typeof module === 'object' && typeof define !== 'function') {\n    var define = function (factory) {\n        module.exports = factory(require, exports, module);\n    };\n}\n\ndefine(function (require, exports, module) {\n    var b = require('b');\n\n    return function () {\n    \treturn {\n\t        STRING: \"string-value\",\n\t        OBJECT: {\n\t            id: \"object-value\"\n\t        }\n\t    };\n    };\n});\n",
    "globals": {
        "module": {
            "type": "typeof"
        },
        "define": {
            "type": "typeof"
        },
        "require": {
            "type": "reference"
        },
        "exports": {
            "type": "reference"
        }
    },
    "syntax": "javascript",
    "format": "amd-ish",
    "undefine": [
        "exports",
        "module"
    ],
    "uses": {},
    "dependencies": {
        "static": {
            "b": {
                "where": "inline"
            }
        },
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}