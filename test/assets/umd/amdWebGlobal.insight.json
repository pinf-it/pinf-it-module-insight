{
    "filename": "amdWebGlobal.js",
    "filepath": "umd/amdWebGlobal.js",
    "mtime": 0,
    "code": "// @see https://github.com/umdjs/umd/blob/master/amdWebGlobal.js\n// Uses AMD or browser globals to create a module. This example creates a\n// global even when AMD is used. This is useful if you have some scripts\n// that are loaded by an AMD loader, but they still want access to globals.\n// If you do not need to export a global for the AMD case, see amdWeb.js.\n\n// If you want something that will also work in Node, and still export a\n// global in the AMD case, see returnExportsGlobal.js\n// If you want to support other stricter CommonJS environments,\n// or if you need to create a circular dependency, see commonJsStrictGlobal.js\n\n// Defines a module \"amdWebGlobal\" that depends another module called \"b\".\n// Note that the name of the module is implied by the file name. It is best\n// if the file name and the exported global have matching names.\n\n// If the 'b' module also uses this type of boilerplate, then\n// in the browser, it will create a global .b that is used below.\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['b'], function (b) {\n            // Also create a global in case some scripts\n            // that are loaded still are looking for\n            // a global even when an AMD loader is in use.\n            return (root.amdWebGlobal = factory(b));\n        });\n    } else {\n        // Browser globals\n        root.amdWebGlobal = factory(root.b);\n    }\n}(this, function (b) {\n    //use b in some fashion.\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return {\n        STRING: \"string-value\",\n        OBJECT: {\n            id: \"object-value\"\n        }\n    };\n}));\n",
    "globals": {
        "define": {
            "type": "typeof"
        }
    },
    "syntax": "javascript",
    "format": "amd-ish",
    "undefine": [],
    "uses": {},
    "dependencies": {
        "static": {
            "b": {
                "where": "declared"
            }
        },
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}