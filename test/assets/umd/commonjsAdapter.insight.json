{
    "filename": "commonjsAdapter.js",
    "filepath": "umd/commonjsAdapter.js",
    "mtime": 0,
    "code": "// @see https://github.com/umdjs/umd/blob/master/commonjsAdapter.js\n// Defines a module that works in CommonJS and AMD.\n\n// This version can be used as common boilerplate for a library module\n// that you only want to expose to CommonJS and AMD loaders. It will not work\n// well for defining browser globals.\n\n// If you only want to target Node and AMD or a CommonJS environment that\n// supports assignment to module.exports and you are not defining a module\n// that has a circular dependency, see nodeAdapter.js\n\n// Help Node out by setting up define.\nif (typeof exports === 'object' && typeof define !== 'function') {\n    define = function (factory) {\n        factory(require, exports, module);\n    };\n}\n\ndefine(function (require, exports, module) {\n    var b = require('b');\n\n    // Only attach properties to the exports object to define\n    // the module's properties.\n    exports.action = function () {};\n    exports.STRING = \"string-value\";\n\texports.OBJECT = {\n\t\tid: \"object-value\"\n\t};\n});\n",
    "globals": {
        "exports": {
            "type": "typeof"
        },
        "define": {
            "type": "typeof"
        },
        "require": {
            "type": "reference"
        },
        "module": {
            "type": "reference"
        }
    },
    "syntax": "javascript",
    "format": "amd-ish",
    "undefine": [
        "exports",
        "module"
    ],
    "uses": {},
    "dependencies": {
        "static": {
            "b": {
                "where": "inline"
            }
        },
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}