{
    "filename": "returnExportsGlobal.js",
    "filepath": "umd/returnExportsGlobal.js",
    "mtime": 0,
    "code": "// @see https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js\n// Uses Node, AMD or browser globals to create a module. This example creates\n// a global even when AMD is used. This is useful if you have some scripts\n// that are loaded by an AMD loader, but they still want access to globals.\n// If you do not need to export a global for the AMD case,\n// see returnExports.js.\n\n// If you want something that will work in other stricter CommonJS environments,\n// or if you need to create a circular dependency, see commonJsStrictGlobal.js\n\n// Defines a module \"returnExportsGlobal\" that depends another module called\n// \"b\". Note that the name of the module is implied by the file name. It is\n// best if the file name and the exported global have matching names.\n\n// If the 'b' module also uses this type of boilerplate, then\n// in the browser, it will create a global .b that is used below.\n\n(function (root, factory) {\n    if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory(require('b'));\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['b'], function (b) {\n            return (root.returnExportsGlobal = factory(b));\n        });\n    } else {\n        // Browser globals\n        root.returnExportsGlobal = factory(root.b);\n    }\n}(this, function (b) {\n    //use b in some fashion.\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return {\n        STRING: \"string-value\",\n        OBJECT: {\n            id: \"object-value\"\n        }\n    };\n}));\n",
    "globals": {
        "exports": {
            "type": "typeof"
        },
        "module": {
            "type": "reference"
        },
        "require": {
            "type": "call"
        },
        "define": {
            "type": "typeof"
        }
    },
    "syntax": "javascript",
    "format": "amd-ish",
    "undefine": [
        "exports",
        "module"
    ],
    "uses": {},
    "dependencies": {
        "static": {
            "b": {
                "where": "declared"
            }
        },
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}