{
    "filename": "jquery.js",
    "filepath": "various/jquery.js",
    "mtime": 0,
    "code": "// @see http://code.jquery.com/jquery-1.9.1.js\n(function( window, undefined ) {\n\n// Can't do this because several apps including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n// Support: Firefox 18+\n//\"use strict\";\nvar\n\t// Use the correct document accordingly with window argument (sandbox)\n\tdocument = window.document,\n\tlocation = window.location,\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$,\n\n\t// Define a local copy of jQuery\n\tjQuery = {};\n\n// Limit scope pollution from any deprecated API\n// (function() {\n\n// })();\n// Expose jQuery to the global object\nwindow.jQuery = window.$ = jQuery;\n\njQuery.fn = {};\njQuery.STRING = \"string-value\";\njQuery.OBJECT = {\n    id: \"object-value\"\n};\n\n// Expose jQuery as an AMD module, but only for AMD loaders that\n// understand the issues with loading multiple versions of jQuery\n// in a page that all might call define(). The loader will indicate\n// they have special allowances for multiple jQuery versions by\n// specifying define.amd.jQuery = true. Register as a named module,\n// since jQuery can be concatenated with other files that may use define,\n// but not use a proper concatenation script that understands anonymous\n// AMD modules. A named AMD is safest and most robust way to register.\n// Lowercase jquery is used because AMD module names are derived from\n// file names, and jQuery is normally delivered in a lowercase file name.\n// Do this after creating the global so that if an AMD module wants to call\n// noConflict to hide this version of jQuery, it will work.\nif ( typeof define === \"function\" && define.amd && define.amd.jQuery ) {\n\tdefine( \"jquery\", [], function () { return jQuery; } );\n}\n\n})( window );",
    "globals": {
        "window": {
            "type": "reference"
        },
        "define": {
            "type": "typeof"
        }
    },
    "syntax": "javascript",
    "format": "amd-ish",
    "undefine": [],
    "uses": {},
    "dependencies": {
        "static": {},
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}