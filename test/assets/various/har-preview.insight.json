{
    "filename": "har-preview.js",
    "filepath": "various/har-preview.js",
    "mtime": 0,
    "code": "/* See license.txt for terms of usage */\n\nrequire.def(\"harPreview\", [\n    \"preview/requestList\",\n    \"preview/pageList\",\n    \"preview/harModel\",\n    \"core/lib\",\n    \"core/trace\",\n    \"preview/menu\",\n    \"preview/validationError\",\n    \"i18n!nls/harPreview\"\n],\n\nfunction(RequestList, PageList, HarModel, Lib, Trace, Menu, ValidationError, Strings) {\n\n//*************************************************************************************************\n// The Preview Application\n\nfunction HarPreview()\n{\n    this.id = \"harPreview\";\n\n    this.model = new HarModel();\n}\n\nHarPreview.prototype =\n{\n    initialize: function(content)\n    {\n        this.topMenu = new Menu()\n        this.topMenu.render(content);\n\n        // Auto load all HAR files specified in the URL.\n        var okCallback = Lib.bind(this.appendPreview, this);\n        var errorCallback = Lib.bind(this.onError, this);\n        HarModel.Loader.run(okCallback, errorCallback);\n    },\n\n    appendPreview: function(jsonString)\n    {\n        try\n        {\n            var validate = true;\n            var param = Lib.getURLParameter(\"validate\");\n            if (param == \"false\")\n                validate = false;\n\n            var input = HarModel.parse(jsonString, validate);\n            this.model.append(input);\n\n            var pageList = new PageList(input);\n            pageList.render(content);\n\n            Lib.fireEvent(content, \"onPreviewHARLoaded\");\n        }\n        catch (err)\n        {\n            Trace.exception(\"HarPreview.appendPreview; EXCEPTION \", err);\n\n            ValidationError.appendError(err, content);\n        }\n    },\n\n    onError: function(response, ioArgs)\n    {\n        Trace.log(\"HarPreview; Load error \", response, ioArgs);\n    },\n\n    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n    // Loading HAR files\n\n    /**\n     * Load HAR file. See {@link HarView.loadHar} for documentation.\n     */ \n    loadHar: function(url, settings)\n    {\n        settings = settings || {};\n        return HarModel.Loader.load(this, url,\n            settings.jsonp,\n            settings.jsonpCallback,\n            settings.success,\n            settings.ajaxError);\n    },\n\n    setPreviewColumns: function(cols, avoidCookies)\n    {\n        RequestList.setVisibleColumns(cols, avoidCookies);\n    }\n}\n\n//*************************************************************************************************\n// Initialization\n/*\nvar content = document.getElementById(\"content\");\nvar harPreview = content.repObject = new HarPreview();\n\n// Fire some events for listeners. This is useful for extending/customizing the viewer.\nLib.fireEvent(content, \"onPreviewPreInit\");\nharPreview.initialize(content);\nLib.fireEvent(content, \"onPreviewInit\");\n\nTrace.log(\"HarPreview; initialized OK\");\n*/\n//*************************************************************************************************\n\n    return {\n        STRING: \"string-value\",\n        OBJECT: {\n            id: \"object-value\"\n        }\n    };\n});\n",
    "globals": {
        "content": {
            "type": "reference"
        }
    },
    "syntax": "javascript",
    "format": "amd",
    "undefine": [],
    "uses": {},
    "dependencies": {
        "static": {
            "preview/requestList": {
                "where": "declared",
                "varname": "RequestList"
            },
            "preview/pageList": {
                "where": "declared",
                "varname": "PageList"
            },
            "preview/harModel": {
                "where": "declared",
                "varname": "HarModel"
            },
            "core/lib": {
                "where": "declared",
                "varname": "Lib"
            },
            "core/trace": {
                "where": "declared",
                "varname": "Trace"
            },
            "preview/menu": {
                "where": "declared",
                "varname": "Menu"
            },
            "preview/validationError": {
                "where": "declared",
                "varname": "ValidationError"
            },
            "nls/harPreview": {
                "where": "declared",
                "varname": "Strings",
                "plugin": "i18n"
            }
        },
        "dynamic": {},
        "computed": false
    },
    "warnings": [],
    "errors": []
}